{"version":3,"sources":["components/Navbar.js","components/Merge.js","components/Sort.js","components/Algo/SelectionSort.js","components/Selection.js","components/Bubble.js","components/Algo/bubbleSort.js","components/Insertion.js","components/Algo/InsertionSort.js","components/Algo/Quicksort.js","components/Quick.js","components/Algo/HeapSort.js","components/Heap.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","location","useLocation","React","useEffect","className","to","id","pathname","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","Sort","useState","arr1","setArr1","value","setValue","isSorting","isSorted","setIsSorted","isDelay","setIsDelay","containerRef","useRef","resetArray","value1","resetArrayColour","min","max","random","arrayBars","current","children","style","backgroundColor","width","margin","onChange","railStyle","height","background","handleStyle","marginLeft","marginTop","border","trackStyle","type","onClick","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","href","step","ref","map","idx","getSelectionSortAnimations","arr","min_idx","copy","n","temp","Selection","SORTED_COLOUR","setIsSorting","animateArrayAccess","index","arrayBarStyle","console","log","forEach","comparison","swapped","prevArr","newValue","newArr","animateSortedArray","animateArrayUpdate","Bubble","getBubbleSortAnimations","Insertion","key","getInsertionSortAnimations","getQuickSortAnimations","quickSortHelper","left","right","part","pivot","partition","Quick","getHeapSortAnimations","heapify","heapSortHelper","largest","l","r","swap","Heap","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.21e740df.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\n\r\nimport {\r\n    Link,\r\n    useLocation\r\n  } from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    let location = useLocation();\r\n  React.useEffect(() => {\r\n  }, [location]);\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">Let's Visualize</Link>\r\n                \r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname===\"/selection\"? \"active\": \" \"}`} aria-current=\"page\" to=\"/selection\">Selection Sort</Link>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname===\"/bubble\"? \"active\": \" \"}`} aria-current=\"page\" to=\"/bubble\">Bubble Sort</Link>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname===\"/insertion\"? \"active\": \" \"}`} aria-current=\"page\" to=\"/insertion\">Insertion Sort</Link>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname===\"/\"? \"active\": \" \"}`} aria-current=\"page\" to=\"/\">Merge Sort</Link>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname===\"/quick\"? \"active\": \" \"}`} aria-current=\"page\" to=\"/quick\">Quick Sort</Link>\r\n                            </li>\r\n                            \r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname===\"/heap\"? \"active\": \" \"}`} aria-current=\"page\" to=\"/heap\">Heap Sort</Link>\r\n                            </li>\r\n                          \r\n                        </ul>\r\n        \r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","/**export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      animations.push([[i], false]);\r\n      \r\n      animations.push([[j], false]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        \r\n        animations.push([[k, i], false]);\r\n        animations.push([[k, auxiliaryArray[i]], true]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([[k, j], false]);\r\n        animations.push([[k, auxiliaryArray[j]], true]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      \r\n      animations.push([[i, i], false]);\r\n      \r\n     animations.push([[k, i], false]);\r\n      animations.push([[k, auxiliaryArray[i]], true]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      \r\n      animations.push([[j, j], false]);\r\n      \r\n      animations.push([[k, j], false]);\r\n      animations.push([[k, auxiliaryArray[j]], true]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n*/\r\n\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n    \r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      \r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      \r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    \r\n    animations.push([i, i]);\r\n    \r\n    animations.push([i, i]);\r\n    \r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    \r\n    animations.push([j, j]);\r\n    \r\n    animations.push([j, j]);\r\n    \r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","import \"./Sort.css\";\r\nimport \"./bubble.css\"\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n//import Bar from \"./Bar\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport {getMergeSortAnimations} from './Merge';\r\n\r\n\r\nexport default function Sort() {\r\n    const ACCESSED_COLOUR = 'red';\r\n    const SORTED_COLOUR = 'blue';\r\n    const [arr1, setArr1] = React.useState([]);\r\n    const [value, setValue] = useState(0)\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [isDelay, setIsDelay] = useState(1);\r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, [])\r\n\r\n    function randomIntFromInterval(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n\r\n  function resetArray(value1) {\r\n      if (isSorting) return;\r\n      if (isSorted) resetArrayColour();\r\n      setIsSorted(false);\r\n      const array = [];\r\n      for (let i = 1; i <= value1; i++) {\r\n          array.push(randomIntFromInterval(0, 500));\r\n      }\r\n      setArr1(array);\r\n  }\r\n\r\n  const onSliderChange = value => {\r\n      resetArray(value);\r\n      setValue(value);\r\n  };\r\n\r\n  const onDelay = value =>{\r\n      setIsDelay(value+0.5);\r\n  }\r\n\r\n  function resetArrayColour() {\r\n      const arrayBars = containerRef.current.children;\r\n      for (let i = 0; i < arr1.length; i++) {\r\n          const arrayBarStyle = arrayBars[i].style;\r\n          arrayBarStyle.backgroundColor = '';\r\n      }\r\n  }\r\n\r\n  /**function animateArrayUpdate(animations) {\r\n      if (isSorting) return;\r\n      setIsSorting(true);\r\n      animations.forEach(([comparison, swapped], index) => {\r\n          setTimeout(() => {\r\n              if (!swapped) {\r\n                  if (comparison.length === 2) {\r\n                      const [i, j] = comparison;\r\n                      animateArrayAccess(i);\r\n                      animateArrayAccess(j);\r\n                  } else {\r\n                      const [i] = comparison;\r\n                      animateArrayAccess(i);\r\n                  }\r\n              } else {\r\n                  setArr1((prevArr) => {\r\n                      const [k, newValue] = comparison;\r\n                      const newArr = [...prevArr];\r\n                      newArr[k] = newValue;\r\n                      return newArr;\r\n                  });\r\n              }\r\n          }, index * isDelay);\r\n      });\r\n      setTimeout(() => {\r\n          animateSortedArray();\r\n      }, animations.length * isDelay);\r\n  }\r\n\r\n  function animateArrayAccess(index) {\r\n      const arrayBars = containerRef.current.children;\r\n      const arrayBarStyle = arrayBars[index].style;\r\n      setTimeout(() => {\r\n          arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n      }, isDelay);\r\n      setTimeout(() => {\r\n          arrayBarStyle.backgroundColor = '';\r\n      }, isDelay * 2);\r\n  }\r\n\r\n  function animateSortedArray() {\r\n      const arrayBars = containerRef.current.children;\r\n      for (let i = 0; i < arrayBars.length; i++) {\r\n          const arrayBarStyle = arrayBars[i].style;\r\n          setTimeout(\r\n              () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n              i * isDelay,\r\n          );\r\n      }\r\n      setTimeout(() => {\r\n          setIsSorted(true);\r\n          setIsSorting(false);\r\n      }, arrayBars.length * isDelay);\r\n  }*/\r\n\r\n  function mergeSort() {\r\n    const animations = getMergeSortAnimations(arr1);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? \"red\" : \"blue\";\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * isDelay);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n         // barOneStyle.backgroundColor = \"yellow\"\r\n        }, i * isDelay);\r\n      }\r\n    }\r\n  }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"array-container\">\r\n                <div className=\"sorty\">\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Generate array</h6>\r\n                        <Slider\r\n                            min={1}\r\n                            max={295}\r\n                            value={value}\r\n                            onChange={onSliderChange}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{value}</strong></p>\r\n                    </div>\r\n                    <div className=\"array-container m-2 ms-3\">\r\n                        <button type=\"button\" className=\"btn btn-dark m-2\" onClick={mergeSort}>Sort</button>\r\n                        <button type=\"button\" className=\"btn btn-danger m-2\" onClick={resetArrayColour}>Reset Array</button>\r\n                        <a type=\"button\" className=\"btn btn-warning m-2\" href=\"/\">Force Stop</a>\r\n                    </div>\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Delay</h6>\r\n                        <Slider\r\n                            step={0.5}\r\n                            min={0}\r\n                            max={40.5}\r\n                            value={isDelay}\r\n                            onChange={onDelay}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{isDelay} sec</strong></p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"array-container ms-3\" ref={containerRef}>\r\n                    {arr1.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"barr\">\r\n                    <div>\r\n                        {/**<div className=\"mb-5 pb-5\"><h6>No. of Comparison - :</h6><strong></strong></div>\r\n                        <hr />*/}\r\n                        <div>\r\n                            <h6>Time Complexity:-</h6>\r\n                            <ul>\r\n                                <li className=\"m-2\"><strong>Best Case [Big-omega]:<div style={{ color: '#044605' }}>O(n*log n)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Average Case [Big-omega]:<div style={{ color: 'rgb(92 60 3)' }}>O(n*log n)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst Case [Big-omega]:<div style={{ color: \"#cb0303\" }}>O(n*log n)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst case space complexity:<div style={{ color: \"#cb0303\" }}>Θ(n) auxiliary</div></strong></li>                    \r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n","export function getSelectionSortAnimations(arr) {\r\n    const copy = [...arr];\r\n    const animations = [];\r\n    let i, j, min_idx;\r\n    const n=copy.length;\r\n\r\n    for (i = 0; i < n - 1; i++) {\r\n        min_idx = i;\r\n        for (j = i + 1; j < n; j++)\r\n        {\r\n            animations.push([[j, min_idx], false]);\r\n            if (copy[j] < copy[min_idx])\r\n            {\r\n                //animations.push([[j, min_idx], false]);\r\n                min_idx = j;\r\n            }\r\n        }\r\n        animations.push([[i, copy[min_idx]], true]);\r\n        animations.push([[min_idx, copy[i]], true]);\r\n        let temp = copy[min_idx];\r\n        copy[min_idx] = copy[i];\r\n        copy[i] = temp;\r\n    }\r\n\r\n    return animations;\r\n}","import \"./Sort.css\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n//import Bar from \"./Bar\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport { getSelectionSortAnimations } from \"../components/Algo/SelectionSort\"\r\n\r\n\r\nexport default function Selection() {\r\n\r\n    // const DELAY = 1;\r\n    const ACCESSED_COLOUR = 'red';\r\n    const SORTED_COLOUR = 'blue';\r\n\r\n    const [arr1, setArr1] = React.useState([]);\r\n    const [value, setValue] = useState(0);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [isDelay, setIsDelay] = useState(1);\r\n\r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, [])\r\n\r\n    function randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n\r\n    function resetArray(value1) {\r\n        if (isSorting) return;\r\n        if (isSorted) resetArrayColour();\r\n        setIsSorted(false);\r\n        const array = [];\r\n        for (let i = 1; i <= value1; i++) {\r\n            array.push(randomIntFromInterval(0, 500));\r\n        }\r\n        setArr1(array);\r\n    }\r\n\r\n    const onSliderChange = value => {\r\n        resetArray(value);\r\n        setValue(value);\r\n    };\r\n\r\n    const onDelay = value => {\r\n        setIsDelay(value + 0.5);\r\n        //setIsDelay(prevState => prevState + 0.5);\r\n    }\r\n\r\n    function resetArrayColour() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arr1.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            arrayBarStyle.backgroundColor = '';\r\n        }\r\n        //setArr1([]);\r\n\r\n    }\r\n\r\n    const selectionSort = () => {\r\n        console.log(getSelectionSortAnimations(arr1))\r\n        const animations = getSelectionSortAnimations(arr1);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    function animateArrayUpdate(animations) {\r\n        if (isSorting) return;\r\n        setIsSorting(true);\r\n        animations.forEach(([comparison, swapped], index) => {\r\n            setTimeout(() => {\r\n                if (!swapped) {\r\n                    if (comparison.length === 2) {\r\n                        const [i, j] = comparison;\r\n                        animateArrayAccess(i);\r\n                        animateArrayAccess(j);\r\n                    } else {\r\n                        const [i] = comparison;\r\n                        animateArrayAccess(i);\r\n                    }\r\n                } else {\r\n                    setArr1((prevArr) => {\r\n                        const [k, newValue] = comparison;\r\n                        const newArr = [...prevArr];\r\n                        newArr[k] = newValue;\r\n                        return newArr;\r\n                    });\r\n                }\r\n            }, index * isDelay);\r\n        });\r\n        setTimeout(() => {\r\n            animateSortedArray();\r\n        }, animations.length * isDelay);\r\n    }\r\n\r\n    function animateArrayAccess(index) {\r\n        const arrayBars = containerRef.current.children;\r\n        const arrayBarStyle = arrayBars[index].style;\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n        }, isDelay);\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = '';\r\n        }, isDelay * 2);\r\n    }\r\n\r\n    function animateSortedArray() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            setTimeout(\r\n                () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n                i * isDelay,\r\n            );\r\n        }\r\n        setTimeout(() => {\r\n            setIsSorted(true);\r\n            setIsSorting(false);\r\n        }, arrayBars.length * isDelay);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"array-container\">\r\n                <div className=\"sorty\">\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Generate array</h6>\r\n                        <Slider\r\n                            min={1}\r\n                            max={295}\r\n                            value={value}\r\n                            onChange={onSliderChange}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{value}</strong></p>\r\n                    </div>\r\n                    <div className=\"array-container m-2 ms-3\">\r\n                        <button type=\"button\" className=\"btn btn-dark m-2\" onClick={selectionSort}>Sort</button>\r\n                        <button type=\"button\" className=\"btn btn-danger m-2\" onClick={resetArrayColour}>Reset Array</button>\r\n                        <a type=\"button\" className=\"btn btn-warning m-2\" href=\"/selection\">Force Stop</a>\r\n                    </div>\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Delay</h6>\r\n                        <Slider\r\n                            step={0.5}\r\n                            min={0}\r\n                            max={40.5}\r\n                            value={isDelay}\r\n                            onChange={onDelay}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{isDelay} sec</strong></p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"array-container ms-3\" ref={containerRef}>\r\n                    {arr1.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"barr\">\r\n                    <div>\r\n                        {/**<div className=\"mb-5 pb-5\"><h6>No. of Comparison - :</h6><strong></strong></div>\r\n                        <hr />*/}\r\n                        <div>\r\n                            <h6>Time Complexity:-</h6>\r\n                            <ul>\r\n                                <li className=\"m-2\"><strong>Best Case [Big-omega]:<div style={{ color: '#044605' }}>O(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Average Case [Big-omega]:<div style={{ color: 'rgb(92 60 3)' }}>O(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst Case [Big-omega]:<div style={{ color: \"#cb0303\" }}>O(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst case space complexity:<div style={{ color: \"#cb0303\" }}>O(1) auxiliary</div></strong></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n}","import \"./Sort.css\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n//import Bar from \"./Bar\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport { getBubbleSortAnimations } from \"../components/Algo/bubbleSort\"\r\n\r\n\r\nexport default function Bubble() {\r\n\r\n   // const DELAY = 1;\r\n    const ACCESSED_COLOUR = 'red';\r\n    const SORTED_COLOUR = 'blue';\r\n\r\n    const [arr1, setArr1] = React.useState([]);\r\n    const [value, setValue] = useState(0);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [isDelay, setIsDelay] = useState(1);\r\n    \r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, [])\r\n\r\n    function randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n\r\n    function resetArray(value1) {\r\n        if (isSorting) return;\r\n        if (isSorted) resetArrayColour();\r\n        setIsSorted(false);\r\n        const array = [];\r\n        for (let i = 1; i <= value1; i++) {\r\n            array.push(randomIntFromInterval(0, 500));\r\n        }\r\n        setArr1(array);\r\n    }\r\n\r\n    const onSliderChange = value => {\r\n        resetArray(value);\r\n        setValue(value);\r\n    };\r\n\r\n    const onDelay = value =>{\r\n        setIsDelay(value+0.5);\r\n        //setIsDelay(prevState => prevState + 0.5);\r\n    }\r\n\r\n    function resetArrayColour() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arr1.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            arrayBarStyle.backgroundColor = '';\r\n        }\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        const animations = getBubbleSortAnimations(arr1);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    function animateArrayUpdate(animations) {\r\n        if (isSorting) return;\r\n        setIsSorting(true);\r\n        animations.forEach(([comparison, swapped], index) => {\r\n            setTimeout(() => {\r\n                if (!swapped) {\r\n                    if (comparison.length === 2) {\r\n                        const [i, j] = comparison;\r\n                        animateArrayAccess(i);\r\n                        animateArrayAccess(j);\r\n                    } else {\r\n                        const [i] = comparison;\r\n                        animateArrayAccess(i);\r\n                    }\r\n                } else {\r\n                    setArr1((prevArr) => {\r\n                        const [k, newValue] = comparison;\r\n                        const newArr = [...prevArr];\r\n                        newArr[k] = newValue;\r\n                        return newArr;\r\n                    });\r\n                }\r\n            }, index * isDelay);\r\n        });\r\n        setTimeout(() => {\r\n            animateSortedArray();\r\n        }, animations.length * isDelay);\r\n    }\r\n\r\n    function animateArrayAccess(index) {\r\n        const arrayBars = containerRef.current.children;\r\n        const arrayBarStyle = arrayBars[index].style;\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n        }, isDelay);\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = '';\r\n        }, isDelay * 2);\r\n    }\r\n\r\n    function animateSortedArray() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            setTimeout(\r\n                () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n                i * isDelay,\r\n            );\r\n        }\r\n        setTimeout(() => {\r\n            setIsSorted(true);\r\n            setIsSorting(false);\r\n        }, arrayBars.length * isDelay);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"array-container\">\r\n                <div className=\"sorty\">\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Generate array</h6>\r\n                        <Slider\r\n                            min={1}\r\n                            max={295}\r\n                            value={value}\r\n                            onChange={onSliderChange}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{value}</strong></p>\r\n                    </div>\r\n                    <div className=\"array-container m-2 ms-3\">\r\n                        <button type=\"button\" className=\"btn btn-dark m-2\" onClick={bubbleSort}>Sort</button>\r\n                        <button type=\"button\" className=\"btn btn-danger m-2\" onClick={resetArrayColour}>Reset Array</button>\r\n                        <a type=\"button\" className=\"btn btn-warning m-2\" href=\"/bubble\">Force Stop</a>\r\n                    </div>\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Delay</h6>\r\n                        <Slider\r\n                            step={0.5}\r\n                            min={0}\r\n                            max={40.5}\r\n                            value={isDelay}\r\n                            onChange={onDelay}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{isDelay} sec</strong></p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"array-container ms-3\" ref={containerRef}>\r\n                    {arr1.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"barr\">\r\n                    <div>\r\n                        {/**<div className=\"mb-5 pb-5\"><h6>No. of Comparison - :</h6><strong></strong></div>\r\n                        <hr />*/}\r\n                        <div>\r\n                            <h6>Time Complexity:-</h6>\r\n                            <ul>\r\n                                <li className=\"m-2\"><strong>Best Case [Big-omega]:<div style={{ color: '#044605' }}>O(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Average Case [Big-omega]:<div style={{ color: 'rgb(92 60 3)' }}>O(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst Case [Big-omega]:<div style={{ color: \"#cb0303\" }}>O(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst case space complexity:<div style={{ color: \"#cb0303\" }}>O(1) auxiliary</div></strong></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n}","export function getBubbleSortAnimations(arr) {\r\n    const copy = [...arr];\r\n    const animations = [];\r\n    const n = copy.length;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let j = 0; j < n - i - 1; j++) {\r\n            animations.push([[i, j], false]);\r\n            animations.push([[j, j+1], false]);\r\n            if (copy[j] > copy[j + 1]) {\r\n                animations.push([[j, copy[j+1]], true]);\r\n                animations.push([[j+1, copy[j]], true]);\r\n                let temp = copy[j];\r\n                copy[j] = copy[j + 1];\r\n                copy[j + 1] = temp;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return animations;\r\n}","import \"./Sort.css\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n//import Bar from \"./Bar\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport { getInsertionSortAnimations } from \"../components/Algo/InsertionSort\"\r\n\r\n\r\nexport default function Insertion() {\r\n\r\n    // const DELAY = 1;\r\n    const ACCESSED_COLOUR = 'red';\r\n    const SORTED_COLOUR = 'blue';\r\n\r\n    const [arr1, setArr1] = React.useState([]);\r\n    const [value, setValue] = useState(0);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [isDelay, setIsDelay] = useState(1);\r\n\r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, [])\r\n\r\n    function randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n\r\n    function resetArray(value1) {\r\n        if (isSorting) return;\r\n        if (isSorted) resetArrayColour();\r\n        setIsSorted(false);\r\n        const array = [];\r\n        for (let i = 1; i <= value1; i++) {\r\n            array.push(randomIntFromInterval(0, 500));\r\n        }\r\n        setArr1(array);\r\n    }\r\n\r\n    const onSliderChange = value => {\r\n        resetArray(value);\r\n        setValue(value);\r\n    };\r\n\r\n    const onDelay = value => {\r\n        setIsDelay(value + 0.5);\r\n    }\r\n\r\n    function resetArrayColour() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arr1.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            arrayBarStyle.backgroundColor = '';\r\n        }\r\n        //setArr1([]);\r\n\r\n    }\r\n\r\n    const insertSort = () => {\r\n        const animations = getInsertionSortAnimations(arr1);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    function animateArrayUpdate(animations) {\r\n        if (isSorting) return;\r\n        setIsSorting(true);\r\n        animations.forEach(([comparison, swapped], index) => {\r\n            setTimeout(() => {\r\n                if (!swapped) {\r\n                    if (comparison.length === 2) {\r\n                        const [i, j] = comparison;\r\n                        animateArrayAccess(i);\r\n                        animateArrayAccess(j);\r\n                    } else {\r\n                        const [i] = comparison;\r\n                        animateArrayAccess(i);\r\n                    }\r\n                } else {\r\n                    setArr1((prevArr) => {\r\n                        const [k, newValue] = comparison;\r\n                        const newArr = [...prevArr];\r\n                        newArr[k] = newValue;\r\n                        return newArr;\r\n                    });\r\n                }\r\n            }, index * isDelay);\r\n        });\r\n        setTimeout(() => {\r\n            animateSortedArray();\r\n        }, animations.length * isDelay);\r\n    }\r\n\r\n    function animateArrayAccess(index) {\r\n        const arrayBars = containerRef.current.children;\r\n        const arrayBarStyle = arrayBars[index].style;\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n        }, isDelay);\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = '';\r\n        }, isDelay * 2);\r\n    }\r\n\r\n    function animateSortedArray() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            setTimeout(\r\n                () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n                i * isDelay,\r\n            );\r\n        }\r\n        setTimeout(() => {\r\n            setIsSorted(true);\r\n            setIsSorting(false);\r\n        }, arrayBars.length * isDelay);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"array-container\">\r\n                <div className=\"sorty\">\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Generate array</h6>\r\n                        <Slider\r\n                            min={1}\r\n                            max={295}\r\n                            value={value}\r\n                            onChange={onSliderChange}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{value}</strong></p>\r\n                    </div>\r\n                    <div className=\"array-container m-2 ms-3\">\r\n                        <button type=\"button\" className=\"btn btn-dark m-2\" onClick={insertSort}>Sort</button>\r\n                        <button type=\"button\" className=\"btn btn-danger m-2\" onClick={resetArrayColour}>Reset Array</button>\r\n                        <a type=\"button\" className=\"btn btn-warning m-2\" href=\"/insertion\">Force Stop</a>\r\n                    </div>\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Delay</h6>\r\n                        <Slider\r\n                            step={0.5}\r\n                            min={0}\r\n                            max={40.5}\r\n                            value={isDelay}\r\n                            onChange={onDelay}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{isDelay} sec</strong></p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"array-container ms-3\" ref={containerRef}>\r\n                    {arr1.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"barr\">\r\n                    <div>\r\n                        {/**<div className=\"mb-5 pb-5\"><h6>No. of Comparison - :</h6><strong></strong></div>\r\n                        <hr />*/}\r\n                        <div>\r\n                            <h6>Time Complexity:-</h6>\r\n                            <ul>\r\n                                <li className=\"m-2\"><strong>Best Case [Big-omega]:<div style={{ color: '#044605' }}>Θ(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Average Case [Big-omega]:<div style={{ color: 'rgb(92 60 3)' }}>Θ(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst Case [Big-omega]:<div style={{ color: \"#cb0303\" }}>Θ(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst case space complexity:<div style={{ color: \"#cb0303\" }}>\r\n                                    O(n^2) total, O(1) auxiliary\r\n                                </div></strong></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n}","export function getInsertionSortAnimations(arr) {\r\n    const copy = [...arr];\r\n    const animations = [];\r\n    let key, j;\r\n    for (let i = 1; i < copy.length; i++) {\r\n        key = copy[i];\r\n        j = i - 1;\r\n        while (j >= 0) {\r\n            animations.push([[i, j], false]);\r\n            animations.push([[j, j+1], false]);\r\n            if (copy[j] > key) {\r\n                animations.push([[j+1, copy[j]], true]);\r\n                copy[j + 1] = copy[j];\r\n                j = j - 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        animations.push([[j+1, key], true]);\r\n        copy[j + 1] = key;\r\n    }\r\n    return animations;\r\n}","export function getQuickSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  quickSortHelper(copy, 0, copy.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(arr, left, right, animations) {\r\n  if (right <= left) return;\r\n  const part = partition(arr, left, right, animations);\r\n  quickSortHelper(arr, left, part, animations);\r\n  quickSortHelper(arr, part + 1, right, animations);\r\n}\r\n \r\nfunction partition(arr, left, right, animations) {\r\n  let i = left;\r\n  let j = right + 1;\r\n  const pivot = arr[left];\r\n  while (true) {\r\n    while (arr[++i] <= pivot) {\r\n      if (i === right) break;\r\n      animations.push([[i], false]);\r\n    }\r\n    while (arr[--j] >= pivot) {\r\n      if (j === left) break;\r\n      animations.push([[j], false]);\r\n    }\r\n    if (j <= i) break;\r\n    animations.push([[i, arr[j]], true]);\r\n    animations.push([[j, arr[i]], true]);\r\n    //swap(arr, i, j);\r\n    const temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n  }\r\n  animations.push([[left, arr[j]], true]);\r\n  animations.push([[j, arr[left]], true]);\r\n  //swap(arr, left, j);\r\n  const temp = arr[left];\r\n    arr[left] = arr[j];\r\n    arr[j] = temp;\r\n  return j;\r\n}\r\n \r\n\r\n/** \r\n\r\nfunction partition(arr, lb, ub, animations) {\r\n  let i = lb - 1;\r\n  let j = ub + 1;\r\n  const pivot = arr[lb];\r\n  while (true) {\r\n    do {\r\n      if (i === ub) break;\r\n      animations.push([[i], false]);\r\n      i++;\r\n    } while (arr[i] < pivot);\r\n\r\n    do {\r\n      if (j === lb) break;\r\n      animations.push([[j], false]);\r\n      j--;\r\n    } while (arr[j] > pivot);\r\n\r\n    if (i >= j) {\r\n      break;\r\n    }\r\n    animations.push([[i, arr[j]], true]);\r\n    animations.push([[j, arr[i]], true]);\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n  }\r\n\r\n  animations.push([[lb, arr[j]], true]);\r\n  animations.push([[j, arr[lb]], true]);\r\n\r\n  const temp = arr[lb];\r\n  arr[lb] = arr[j];\r\n  arr[j] = temp;\r\n  return j;\r\n}\r\nfunction quickSortHelper(arr, left, right, animations) {\r\n  if (right <= left) return;\r\n  const part = partition(arr, left, right, animations);\r\n  quickSortHelper(arr, left, part, animations);\r\n  quickSortHelper(arr, part + 1, right, animations);\r\n}\r\n*/","import \"./Sort.css\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport Bar from \"./Bar\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport { getQuickSortAnimations } from \"../components/Algo/Quicksort\"\r\n\r\n\r\nexport default function Quick() {\r\n\r\n    const DELAY = 1;\r\n    const ACCESSED_COLOUR = 'red';\r\n    const SORTED_COLOUR = 'blue';\r\n\r\n    const [arr1, setArr1] = React.useState([]);\r\n    const [value, setValue] = useState(0);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [isDelay, setIsDelay] = useState(1);\r\n    \r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, [])\r\n\r\n    function randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n\r\n    function resetArray(value1) {\r\n        if (isSorting) return;\r\n        if (isSorted) resetArrayColour();\r\n        setIsSorted(false);\r\n        const array = [];\r\n        for (let i = 1; i <= value1; i++) {\r\n            array.push(randomIntFromInterval(0, 500));\r\n        }\r\n        setArr1(array);\r\n    }\r\n\r\n    const onSliderChange = value => {\r\n        resetArray(value);\r\n        setValue(value);\r\n    };\r\n\r\n    const onDelay = value =>{\r\n        setIsDelay(value+0.5);\r\n        //setIsDelay(prevState => prevState + 0.5);\r\n    }\r\n\r\n    function resetArrayColour() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arr1.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            arrayBarStyle.backgroundColor = '';\r\n        }\r\n        //setArr1([]);\r\n\r\n    }\r\n\r\n    const quickSort = () => {\r\n        const animations = getQuickSortAnimations(arr1);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    function animateArrayUpdate(animations) {\r\n        if (isSorting) return;\r\n        setIsSorting(true);\r\n        animations.forEach(([comparison, swapped], index) => {\r\n            setTimeout(() => {\r\n                if (!swapped) {\r\n                    if (comparison.length === 2) {\r\n                        const [i, j] = comparison;\r\n                        animateArrayAccess(i);\r\n                        animateArrayAccess(j);\r\n                    } else {\r\n                        const [i] = comparison;\r\n                        animateArrayAccess(i);\r\n                    }\r\n                } else {\r\n                    setArr1((prevArr) => {\r\n                        const [k, newValue] = comparison;\r\n                        const newArr = [...prevArr];\r\n                        newArr[k] = newValue;\r\n                        return newArr;\r\n                    });\r\n                }\r\n            }, index * isDelay);\r\n        });\r\n        setTimeout(() => {\r\n            animateSortedArray();\r\n        }, animations.length * isDelay);\r\n    }\r\n\r\n    function animateArrayAccess(index) {\r\n        const arrayBars = containerRef.current.children;\r\n        const arrayBarStyle = arrayBars[index].style;\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n        }, isDelay);\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = '';\r\n        }, isDelay * 2);\r\n    }\r\n\r\n    function animateSortedArray() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            setTimeout(\r\n                () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n                i * isDelay,\r\n            );\r\n        }\r\n        setTimeout(() => {\r\n            setIsSorted(true);\r\n            setIsSorting(false);\r\n        }, arrayBars.length * isDelay);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"array-container\">\r\n                <div className=\"sorty\">\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Generate array</h6>\r\n                        <Slider\r\n                            min={1}\r\n                            max={295}\r\n                            value={value}\r\n                            onChange={onSliderChange}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{value}</strong></p>\r\n                    </div>\r\n                    <div className=\"array-container m-2 ms-3\">\r\n                        <button type=\"button\" className=\"btn btn-dark m-2\" onClick={quickSort}>Sort</button>\r\n                        <button type=\"button\" className=\"btn btn-danger m-2\" onClick={resetArrayColour}>Reset Array</button>\r\n                        <a type=\"button\" className=\"btn btn-warning m-2\" href=\"/quick\">Force Stop</a>\r\n                    </div>\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Delay</h6>\r\n                        <Slider\r\n                            step={0.5}\r\n                            min={0}\r\n                            max={40.5}\r\n                            value={isDelay}\r\n                            onChange={onDelay}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{isDelay} sec</strong></p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"array-container ms-3\" ref={containerRef}>\r\n                    {arr1.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"barr\">\r\n                    <div>\r\n                        {/**<div className=\"mb-5 pb-5\"><h6>No. of Comparison - :</h6><strong></strong></div>\r\n                        <hr />*/}\r\n                        <div>\r\n                            <h6>Time Complexity:-</h6>\r\n                            <ul>\r\n                                <li className=\"m-2\"><strong>Best Case [Big-omega]:<div style={{ color: '#044605' }}>O(n*log n)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Average Case [Big-omega]:<div style={{ color: 'rgb(92 60 3)' }}>O(n*log n)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst Case [Big-omega]:<div style={{ color: \"#cb0303\" }}>O(n^2)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst case space complexity:<div style={{ color: \"#cb0303\" }}>O(1) auxiliary</div></strong></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n}","export function getHeapSortAnimations(arr) {\r\n    const copy = [...arr];\r\n    const animations = [];\r\n    heapSortHelper(copy, animations);\r\n    return animations;\r\n  }\r\n\r\n  function heapSortHelper( arr, animations)\r\n    {\r\n        var n = arr.length;\r\n        for (var i = Math.floor(n / 2) - 1; i >= 0; i--)\r\n        {\r\n            animations.push([[i], false])\r\n            heapify(arr, n, i, animations);\r\n            animations.push([[i, Math.floor(n / 2) - 1], false])\r\n        }\r\n\r\n        for (let i = n - 1; i > 0; i--) {\r\n\r\n            animations.push([[0, i], false]);\r\n            animations.push([[0, arr[i]], true]);\r\n            animations.push([[i, arr[0]], true]);\r\n            let temp = arr[0];\r\n            arr[0] = arr[i];\r\n            arr[i] = temp;\r\n \r\n\r\n            heapify(arr, i, 0, animations);\r\n            animations.push([[i, 0], false]);\r\n        }\r\n    }\r\n\r\n    function heapify(arr, n, i, animations)\r\n    {\r\n        var largest = i;\r\n        var l = 2 * i + 1;\r\n        var r = 2 * i + 2; \r\n \r\n\r\n        if (l < n && arr[l] > arr[largest])\r\n\r\n            largest = l;\r\n \r\n\r\n        if (r < n && arr[r] > arr[largest])\r\n            largest = r;\r\n \r\n\r\n        if (largest !== i) {\r\n            var swap = arr[i];\r\n            arr[i] = arr[largest];\r\n            arr[largest] = swap;\r\n\r\n            heapify(arr, n, largest);\r\n        }\r\n    }\r\n  ","import \"./Sort.css\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n//simport Bar from \"./Bar\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport { getHeapSortAnimations } from \"../components/Algo/HeapSort\"\r\n\r\n\r\nexport default function Heap() {\r\n\r\n    //const DELAY = 1;\r\n    const ACCESSED_COLOUR = 'red';\r\n    const SORTED_COLOUR = 'blue';\r\n\r\n    const [arr1, setArr1] = React.useState([]);\r\n    const [value, setValue] = useState(0);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [isDelay, setIsDelay] = useState(1);\r\n    \r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, [])\r\n\r\n    function randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n\r\n    function resetArray(value1) {\r\n        if (isSorting) return;\r\n        if (isSorted) resetArrayColour();\r\n        setIsSorted(false);\r\n        const array = [];\r\n        for (let i = 1; i <= value1; i++) {\r\n            array.push(randomIntFromInterval(0, 500));\r\n        }\r\n        setArr1(array);\r\n    }\r\n\r\n    const onSliderChange = value => {\r\n        resetArray(value);\r\n        setValue(value);\r\n    };\r\n\r\n    const onDelay = value =>{\r\n        setIsDelay(value+0.5);\r\n        //setIsDelay(prevState => prevState + 0.5);\r\n    }\r\n\r\n    function resetArrayColour() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arr1.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            arrayBarStyle.backgroundColor = '';\r\n        }\r\n        //setArr1([]);\r\n\r\n    }\r\n\r\n    const heapSort = () => {\r\n        console.log(getHeapSortAnimations(arr1))\r\n        const animations = getHeapSortAnimations(arr1);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    function animateArrayUpdate(animations) {\r\n        if (isSorting) return;\r\n        setIsSorting(true);\r\n        animations.forEach(([comparison, swapped], index) => {\r\n            setTimeout(() => {\r\n                if (!swapped) {\r\n                    if (comparison.length === 2) {\r\n                        const [i, j] = comparison;\r\n                        animateArrayAccess(i);\r\n                        animateArrayAccess(j);\r\n                    } else {\r\n                        const [i] = comparison;\r\n                        animateArrayAccess(i);\r\n                    }\r\n                } else {\r\n                    setArr1((prevArr) => {\r\n                        const [k, newValue] = comparison;\r\n                        const newArr = [...prevArr];\r\n                        newArr[k] = newValue;\r\n                        return newArr;\r\n                    });\r\n                }\r\n            }, index * isDelay);\r\n        });\r\n        setTimeout(() => {\r\n            animateSortedArray();\r\n        }, animations.length * isDelay);\r\n    }\r\n\r\n    function animateArrayAccess(index) {\r\n        const arrayBars = containerRef.current.children;\r\n        const arrayBarStyle = arrayBars[index].style;\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n        }, isDelay);\r\n        setTimeout(() => {\r\n            arrayBarStyle.backgroundColor = '';\r\n        }, isDelay * 2);\r\n    }\r\n\r\n    function animateSortedArray() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            const arrayBarStyle = arrayBars[i].style;\r\n            setTimeout(\r\n                () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n                i * isDelay,\r\n            );\r\n        }\r\n        setTimeout(() => {\r\n            setIsSorted(true);\r\n            setIsSorting(false);\r\n        }, arrayBars.length * isDelay);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"array-container\">\r\n                <div className=\"sorty\">\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Generate array</h6>\r\n                        <Slider\r\n                            min={1}\r\n                            max={295}\r\n                            value={value}\r\n                            onChange={onSliderChange}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{value}</strong></p>\r\n                    </div>\r\n                    <div className=\"array-container m-2 ms-3\">\r\n                        <button type=\"button\" className=\"btn btn-dark m-2\" onClick={heapSort}>Sort</button>\r\n                        <button type=\"button\" className=\"btn btn-danger m-2\" onClick={resetArrayColour}>Reset Array</button>\r\n                        <a type=\"button\" className=\"btn btn-warning m-2\" href=\"/heap\">Force Stop</a>\r\n                    </div>\r\n                    <div style={{ width: 250, margin: 15 }}>\r\n                        <h6>Delay</h6>\r\n                        <Slider\r\n                            step={0.5}\r\n                            min={0}\r\n                            max={40.5}\r\n                            value={isDelay}\r\n                            onChange={onDelay}\r\n                            railStyle={{\r\n                                height: 2,\r\n                                background: '#7a7070b8'\r\n                            }}\r\n                            handleStyle={{\r\n                                height: 20,\r\n                                width: 20,\r\n                                marginLeft: -8.7,\r\n                                marginTop: -8.7,\r\n                                backgroundColor: \"blue\",\r\n                                border: 1\r\n                            }}\r\n                            trackStyle={{\r\n                                backgroundColor: 'rgb(43, 40, 40)',\r\n                            }}\r\n                        />\r\n                        <p><strong>{isDelay} sec</strong></p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"array-container ms-3\" ref={containerRef}>\r\n                    {arr1.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"barr\">\r\n                    <div>\r\n                        {/**<div className=\"mb-5 pb-5\"><h6>No. of Comparison - :</h6><strong></strong></div>\r\n                        <hr />*/}\r\n                        <div>\r\n                            <h6>Time Complexity:-</h6>\r\n                            <ul>\r\n                            <li className=\"m-2\"><strong>Best Case [Big-omega]:<div style={{ color: '#044605' }}>Θ(n*logn)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Average Case [Big-omega]:<div style={{ color: 'rgb(92 60 3)' }}>Θ(n*logn)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst Case [Big-omega]:<div style={{ color: \"#cb0303\" }}>Θ(n*logn)</div></strong></li>\r\n                                <li className=\"m-2\"><strong>Worst case space complexity:<div style={{ color: \"#cb0303\" }}>O(1) auxiliary</div></strong></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n}","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Sort from './components/Sort';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Selection from './components/Selection';\nimport Bubble from './components/Bubble';\nimport Insertion from './components/Insertion';\nimport Quick from './components/Quick';\nimport Heap from './components/Heap';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <>\n      <Navbar/>\n      <Switch>\n          <Route exact path=\"/\">\n           <Sort/>\n          </Route>\n\n          <Route exact path=\"/selection\">\n           <Selection/>\n          </Route>\n\n          <Route exact path=\"/bubble\">\n           <Bubble/>\n          </Route>\n\n          <Route exact path=\"/insertion\">\n           <Insertion/>\n          </Route>\n\n          <Route exact path=\"/quick\">\n           <Quick/>\n          </Route>\n\n          <Route exact path=\"/heap\">\n            <Heap/>\n          </Route>\n        </Switch>\n      </>\n    </HashRouter>   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}